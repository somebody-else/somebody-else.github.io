<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ceph RGW source code reading &lt;1&gt; - RGWSI Archtecture</title>
    <link href="/2025/09/13/rgw-code-reading1/"/>
    <url>/2025/09/13/rgw-code-reading1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>RGW is an S3 Service build upon Ceph Rados distribute storage cluster.  It use a SAL layer to interact with Rados Storage.   The SAL layer employs an bridge between RadosStore(Driver on RGW side) and RGWRados(Rados client on Rados side). </p><p>RGWRados orgainze different RGW system Rados implementation code into a concept of <code>RGW Service Instance</code>.</p><p>RGWSI &#x3D;&#x3D; RGW Service Instance</p></blockquote><div style="width: 600px;">  <img src="/rgw-code-reading1/How-RGW-connect-to-Rados.png" alt="How RGW connect to Rados" style="width:100%;" /></div><h2 id="The-initialization-code-path"><a href="#The-initialization-code-path" class="headerlink" title="The initialization code path"></a>The initialization code path</h2><div style="width: 600px;">  <img src="/rgw-code-reading1/services-init-callstack.png" alt="Service Init Code" style="width:100%;" /></div><h1 id="What-are-services"><a href="#What-are-services" class="headerlink" title="What are services"></a>What are services</h1><p>​Following are the services RGW defined:</p><table><thead><tr><th>service class</th><th>description</th></tr></thead><tbody><tr><td>RGWSI_Finisher</td><td><strong>RGWSI_Finisher provides a structured way to register and execute callbacks that run after an operation is completed</strong>, such as PUT, DELETE, or creating a bucket. It’s like a “post-processing” manager.</td></tr><tr><td>RGWSI_Bucket</td><td>Virtual class for RGWSI_Bucket_SObj</td></tr><tr><td>RGWSI_Bucket_SObj</td><td>Bucket system object operation class, including:<br/>- bucket endpoint read&#x2F;write<br/>- bucket instance info read&#x2F;write<br/>- bucket statistics info read</td></tr><tr><td>RGWSI_Bucket_Sync</td><td></td></tr><tr><td>RGWSI_Bucket_Sync_SObj</td><td></td></tr><tr><td>RGWSI_BucketIndex</td><td></td></tr><tr><td>RGWSI_BucketIndex_RADOS</td><td></td></tr><tr><td>RGWSI_BILog_RADOS</td><td></td></tr><tr><td>RGWSI_Cls</td><td>An abstraction of librados objclass operations</td></tr><tr><td>RGWSI_ConfigKey</td><td></td></tr><tr><td>RGWSI_ConfigKey_RADOS</td><td></td></tr><tr><td>RGWSI_MDLog</td><td>The MDlog service is used to read&#x2F;write MDLogs,which is used to sync metadata changes among mulitple zone in same zone group.</td></tr><tr><td>RGWSI_Meta</td><td></td></tr><tr><td>RGWSI_MetaBackend</td><td>The Metadata Backend service is used to execute the metadata operation, and also handle the meta data syncing among zones in same zone group by employing mdlog. It provide 4 methods: prepare_mutate, do_mutate, pre_modify and post_modify</td></tr><tr><td>RGWSI_MetaBackend_SObj</td><td>Backend of System Object. It implemented the <code>RGWSI_MetaBackend</code>.  It have different <code>RGWSI_MBSObj_Handler_Module</code>.  Each <code>RGWSI_MBSObj_Handler_Module</code> class defined the pools and prefix of each system object type using.</td></tr><tr><td>RGWSI_MetaBackend_OTP</td><td></td></tr><tr><td>RGWSI_Notify</td><td></td></tr><tr><td>RGWSI_OTP</td><td></td></tr><tr><td>RGWSI_Zone</td><td></td></tr><tr><td>RGWSI_ZoneUtils</td><td></td></tr><tr><td>RGWSI_Quota</td><td></td></tr><tr><td>RGWSI_SyncModules</td><td></td></tr><tr><td>RGWSI_SysObj</td><td>The system object service provide a basic metadata read&#x2F;write operation.</td></tr><tr><td>RGWSI_SysObj_Core</td><td></td></tr><tr><td>RGWSI_SysObj_Cache</td><td></td></tr><tr><td>RGWSI_User</td><td></td></tr><tr><td>RGWSI_User_RADOS</td><td></td></tr><tr><td>RGWDataChangesLog</td><td></td></tr><tr><td>RGWSI_Role_RADOS</td><td></td></tr><tr><td>RGWAsyncRadosProcessor</td><td>RGWAsyncRadosProcessor is a utility class used in Ceph RGW to <strong>manage multiple concurrent asynchronous RADOS operations</strong>. It provides batching, error handling, and lifecycle management for those operations, helping the RGW process user requests efficiently without blocking on individual RADOS I&#x2F;O.</td></tr></tbody></table><blockquote><p> All the service are defined and inited in  rgw_service.h</p></blockquote><h1 id="RGW-Service-Meshing"><a href="#RGW-Service-Meshing" class="headerlink" title="RGW Service Meshing"></a>RGW Service Meshing</h1><div style="width: 1000px;">  <img src="/rgw-code-reading1/rados-service-mesh.png" alt="Service Mesh" style="width:100%;" /></div> <h1 id="How-services-Inited"><a href="#How-services-Inited" class="headerlink" title="How services Inited"></a>How services Inited</h1><h2 id="How-rgw-down-to-services-init"><a href="#How-rgw-down-to-services-init" class="headerlink" title="How rgw down to services init"></a>How rgw down to services init</h2><div style="width: 1000px;">  <img src="/rgw-code-reading1/rgw-init-routine.png" alt="RGW init" style="width:100%;" /></div> <h2 id="Service-init"><a href="#Service-init" class="headerlink" title="Service init"></a>Service init</h2><p>RGWServices_Def::Init has mainly three parts:</p><ul><li><p>Create instance of each services.</p></li><li><p>Do services mesh references with init().  IN most of init functions, it just fill the other service instances into local srv structure.  Except:</p><ul><li>RGWSI_Zone:  It also create instances of <code>RGWRealm</code>, <code>RGWZoneGroup</code>, <code>RGWZone</code>, <code>RGWZoneParams</code> and <code>RGWPeriod</code>.</li></ul></li><li><p>Start services with do_start(). This part is more complex.  </p><ul><li><p>RGWSI_Finisher: call Finisher.start(), which create the finisher thread</p></li><li><p>RGWSI_Notify:  call RGWSI_Zone start(), and also call RGW_Finisher.start() again. Don’t understand why???</p></li><li><p><strong>RGWSI_Zone</strong>:  Based on current code, it should be already called in RGWSI_Notify.start().  It call the RGWSI_SysObj.start(), and also init the Realm, zone group, zone, and period.</p></li><li><p><strong>RGWDataChangesLog</strong>： Call start to start data change log syncing thread.</p></li><li><p><strong>RGWSI_MDLog</strong>: call start to start the metadata log syncing.</p></li><li><p><strong>RGWSI_SyncModules</strong>: call start to start the syncing module handlers</p></li><li><p>RGWSI_Cls: call start to start mfa</p></li><li><p>RGWSI_ConfigKey_RADOS： Call start to to check the connection to monitor nodes to the config SSL keys</p></li><li><p>RGWSI_ZoneUtils: Nothing important</p></li><li><p>RGWSI_Quota: do nothing</p></li><li><p>RGWSI_SysObj_Core: do nothing</p></li><li><p>RGWSI_SysObj” do nothing</p></li><li><p>RGWSI_MetaBackend_SObj: do nothing</p></li><li><p>RGWSI_Meta: do nothing</p></li><li><p>RGWSI_Bucket_SObj: Call start to register the Metadata backend handler and module for bucket endpoint and instance info</p></li><li><p>RGWSI_Bucket_Sync: Do nothing</p></li><li><p>RGWSI_User_RADOS: Call start to create the Metadata backend handler and module for user</p></li><li><p>RGWSI_OTP: create the Metadata backend handler and module for OTP</p></li><li><p>RGWSI_Role_RADOS: create Metadata backend handler and module for Role</p></li></ul><p>  ​</p></li></ul><h2 id="Ctl-init"><a href="#Ctl-init" class="headerlink" title="Ctl init"></a>Ctl init</h2><div style="width: 1000px;">  <img src="/rgw-code-reading1/rgw-ctrl.png" alt="RGW Control" style="width:100%;" /></div> <p>In <code>RGWCtlDef::init</code>, it create all metadata handlers.  Please pay attention that <code>account</code> and <code>group</code> doesn’t use the generic metadata handler, they are designed in a much simpler way. And also, the <code>bucket endpoint and instance </code>will have different handlers depending on if has <code>sync module</code>.</p><p>After that, it start to init all the metadata handlers by setting references to service instance and ctrl instance.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"> <span class="hljs-comment">// Init the bucket_meta_handler reference to RGWSI_Bucket_Sobj and RGWBucketCtl, and set the be_handler</span><br>bucket_meta_handler-&gt;<span class="hljs-built_in">init</span>(svc.bucket, bucket.<span class="hljs-built_in">get</span>()); <br><span class="hljs-comment">// Similar as above</span><br> bi_meta_handler-&gt;<span class="hljs-built_in">init</span>(svc.zone, svc.bucket, svc.bi);<br> ...<br> otp_handler-&gt;<span class="hljs-built_in">init</span>(svc.zone, svc.meta_be_otp, svc.otp);<br> ...<br><br><br></code></pre></td></tr></table></figure><p>​Then it start to init the control instance</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">user-&gt;<span class="hljs-built_in">init</span>(bucket.<span class="hljs-built_in">get</span>());<br>bucket-&gt;<span class="hljs-built_in">init</span>(user.<span class="hljs-built_in">get</span>(),<br>             (RGWBucketMetadataHandler *)bucket_meta_handler,<br>             (RGWBucketInstanceMetadataHandler *)bi_meta_handler,<br>      svc.datalog_rados,<br>             dpp);<br><br>otp-&gt;<span class="hljs-built_in">init</span>((RGWOTPMetadataHandler *)meta.otp.<span class="hljs-built_in">get</span>());<br></code></pre></td></tr></table></figure><p>After that, all the metadata handlers are registered to RGWMetadataManagers</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++">r = meta.user-&gt;<span class="hljs-built_in">attach</span>(meta.mgr);<br> <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-built_in">ldout</span>(cct, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start init meta.user ctl (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>   <span class="hljs-keyword">return</span> r;<br> &#125;<br><br> r = meta.bucket-&gt;<span class="hljs-built_in">attach</span>(meta.mgr);<br> <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-built_in">ldout</span>(cct, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start init meta.bucket ctl (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>   <span class="hljs-keyword">return</span> r;<br> &#125;<br><br> r = meta.bucket_instance-&gt;<span class="hljs-built_in">attach</span>(meta.mgr);<br> <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-built_in">ldout</span>(cct, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start init meta.bucket_instance ctl (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>   <span class="hljs-keyword">return</span> r;<br> &#125;<br><br> r = meta.otp-&gt;<span class="hljs-built_in">attach</span>(meta.mgr);<br> <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-built_in">ldout</span>(cct, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start init otp ctl (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>   <span class="hljs-keyword">return</span> r;<br> &#125;<br><br> r = meta.role-&gt;<span class="hljs-built_in">attach</span>(meta.mgr);<br> <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-built_in">ldout</span>(cct, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start init meta.role ctl (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>   <span class="hljs-keyword">return</span> r;<br> &#125;<br><br> r = _ctl.meta.account-&gt;<span class="hljs-built_in">attach</span>(meta.mgr);<br> <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-built_in">ldout</span>(cct, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start init meta.account ctl (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>   <span class="hljs-keyword">return</span> r;<br> &#125;<br><br> r = meta.topic-&gt;<span class="hljs-built_in">attach</span>(meta.mgr);<br> <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-built_in">ldout</span>(cct, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start init topic ctl (&quot;</span><br>                 &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>   <span class="hljs-keyword">return</span> r;<br> &#125;<br><br> r = _ctl.meta.group-&gt;<span class="hljs-built_in">attach</span>(meta.mgr);<br> <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-built_in">ldout</span>(cct, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start init meta.group ctl (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>   <span class="hljs-keyword">return</span> r;<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>The last step is <code>RGWRados::init_complete</code>.</p><ul><li>It first open io context for each pools if the pools exist, otherwise create the pool and also open the io context.</li><li>Initialize the <code>RGWGC</code></li><li>initialize the <code>RGWObjectExpirer</code></li><li>initialize the sync thread <code>RGWMetaSyncProcessorThread</code>for meta data. If current zone is the metadata master, initialize and start the <code>RGWMetaNotifier</code> thread.</li><li>Configure the bucket trim manager</li><li>intiailize the  object data sync threads <code>RGWDataSyncProcessorThread</code>for each <code>sync_from</code> zone in the configuration list. </li><li>initialize the <code>RGWSyncLogTrimThread</code></li><li>intialize and start the <code>RGWDataNotifier</code></li><li>Intialize bucket info cache and topic cache</li><li>Intialize and start the LifeCycle Cofiguration thread <code>RGWLC</code></li><li>Initalize the max bucket shards, and start reshard thread <code>RGWReshard</code></li><li>Create instance of <code>RGWIndexCompletionManager</code></li><li>start notificaiton thread, and migrate V1 to V2.</li></ul><h1 id="MDlog-Service"><a href="#MDlog-Service" class="headerlink" title="MDlog Service"></a>MDlog Service</h1><blockquote><p>The MDlog service is used to read&#x2F;write MDLogs. There are two type of MDLogs</p><ul><li>Pre-modify MDLOG with flag of MDLOG_STATUS_WRITE&#x2F;REMOVE </li><li>Post-modify MDLOG with flag MDLOG_STATUS_COMPLETE</li></ul></blockquote><div style="width: 400px;">  <img src="/rgw-code-reading1/mdlog-service.png" alt=" MDlog Service Code" style="width:100%;" /></div><h1 id="System-Object-Service"><a href="#System-Object-Service" class="headerlink" title="System Object Service"></a>System Object Service</h1><blockquote><p>The system object service provide a basic metadata read&#x2F;write operation.  </p><ul><li>ROP: for read operation</li><li>WOP: for write operation</li><li>OmapOP: for omap operation</li><li>WNOp: for notification write</li></ul></blockquote><blockquote><p> OMAP  - A key-value map used in metadata objects</p><p> In rgw code, it looks like didn’t save the key, it just use a fixed schema to serialize the structure.</p></blockquote><div style="width: 600px;">  <img src="/rgw-code-reading1/sysobject-class.png" alt="System Object Service Code" style="width:100%;" /></div><h1 id="Metadata-Backend-Service"><a href="#Metadata-Backend-Service" class="headerlink" title="Metadata Backend Service"></a>Metadata Backend Service</h1><blockquote><p>The Metadata Backend service is used to execute the metadata operation, and also handle the meta data syncing among zones in same zone group. </p></blockquote><div style="width: 1000px;">  <img src="/rgw-code-reading1/metadata-backend.png" alt="Metadata Backend Service Code" style="width:100%;" /></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RGWSI_MetaBackend::do_mutate</span><span class="hljs-params">(RGWSI_MetaBackend::Context *ctx,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-type">const</span> string&amp; key,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-type">const</span> ceph::real_time&amp; mtime,</span></span><br><span class="hljs-params"><span class="hljs-function"> RGWObjVersionTracker *objv_tracker,</span></span><br><span class="hljs-params"><span class="hljs-function"> RGWMDLogStatus op_type,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 optional_yield y,</span></span><br><span class="hljs-params"><span class="hljs-function"> std::function&lt;<span class="hljs-type">int</span>()&gt; f,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-type">bool</span> generic_prepare,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-type">const</span> DoutPrefixProvider *dpp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> ret;<br><br>  <span class="hljs-keyword">if</span> (generic_prepare) &#123;<br>    ret = <span class="hljs-built_in">prepare_mutate</span>(ctx, key, mtime, objv_tracker, y, dpp);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span> ||<br>ret == STATUS_NO_APPLY) &#123;<br>      <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>  &#125;<br><br>  RGWMetadataLogData log_data;<br>   <span class="hljs-comment">/*Flag the mdlog as WRITE/REMOVE*/</span><br>  ret = <span class="hljs-built_in">pre_modify</span>(dpp, ctx, key, log_data, objv_tracker, op_type, y);<br>  <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> ret;<br>  &#125;<br><br>  <span class="hljs-comment">/* Execute the operation */</span><br>  ret = <span class="hljs-built_in">f</span>();<br><br>  <span class="hljs-comment">/* cascading ret into post_modify(). Flag the mdlog as COMPLETE */</span><br>  ret = <span class="hljs-built_in">post_modify</span>(dpp, ctx, key, log_data, objv_tracker, ret, y);<br>  <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> ret;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>From the above chart, you can see MetaData Backend defined three part of APIs:</p><ul><li>The set for data syncing hooks</li><li>The set for metadata oppratons</li><li>The high level operations which combines meta data operations with data syncing hooks. This set of operations are usually the interface operations exposed to outside.</li></ul><p>No other services use MetaBackend classes directly, but call it via an MetaBackend Handler.  The MetaBack Handler has instance of <code>MetaBackend::Module</code> to distiguish different type of meta data, identify the metadata location(Pool and namespace), and even Oids. MetaBackend method always use thoe modules to do operation.</p><h1 id="MetaData-Backend-SObject-Service"><a href="#MetaData-Backend-SObject-Service" class="headerlink" title="MetaData Backend SObject Service"></a>MetaData Backend SObject Service</h1><p>Backend of System Object. It implemented the <code>RGWSI_MetaBackend</code>.It is the major metadata backends in rgw.  It have different <code>RGWSI_MBSObj_Handler_Module</code>.  Each <code>RGWSI_MBSObj_Handler_Module</code> class defined the pools and prefix of each system object type using by providing following methods:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">get_pool_and_oid</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key, rgw_pool *pool, std::string *oid)</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">get_oid_prefix</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">key_to_oid</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key)</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_valid_oid</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; oid)</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">oid_to_key</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; oid)</span> </span>= <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>Based on the sub modules, it is easily find out the RGWSI_metaBackend_SObj is mainly used to operate and sync the metadata object in <code>rgw.meta</code> pool, and each modules take charge of a namespace.</p><div style="width: 400px;">  <img src="/rgw-code-reading1/metadata_be_module.png" alt="Metadata Backend Modules" style="width:100%;" /></div><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">enum RGWSI_META_BE_TYPES &#123;<br>  SOBJ   = <span class="hljs-number">1</span>,<br>  OTP    = <span class="hljs-number">2</span>,<br>  BUCKET = <span class="hljs-number">3</span>,<br>  BI     = <span class="hljs-number">4</span>,<br>  <span class="hljs-keyword">USER</span>   <span class="hljs-title">= 5</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="RGW-Zone-Service"><a href="#RGW-Zone-Service" class="headerlink" title="RGW Zone Service"></a>RGW Zone Service</h1><p>#TBD</p><h1 id="RGW-DataChangeLog-service"><a href="#RGW-DataChangeLog-service" class="headerlink" title="RGW DataChangeLog service"></a>RGW DataChangeLog service</h1><h1 id="Sync-Module-Service"><a href="#Sync-Module-Service" class="headerlink" title="Sync Module Service"></a>Sync Module Service</h1><h1 id="RGWSI-Cls"><a href="#RGWSI-Cls" class="headerlink" title="RGWSI_Cls"></a>RGWSI_Cls</h1><p>An abstraction of librados objclass operations</p><p>Includes MFA, lock.</p>]]></content>
    
    
    
    <tags>
      
      <tag>ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rgw metadata, pool and system objects</title>
    <link href="/2025/09/13/rgw-metadata/"/>
    <url>/2025/09/13/rgw-metadata/</url>
    
    <content type="html"><![CDATA[<p>Meta Data saved in pools</p><h1 id="Pools-used-by-Zone"><a href="#Pools-used-by-Zone" class="headerlink" title="Pools used by Zone"></a>Pools used by Zone</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;domain_root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;control_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.control&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;gc_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.gc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.log&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;intent_log_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.log&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;usage_log_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.usage&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;reshard_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.reshard&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;user_keys_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;user_email_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;user_swift_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;user_uid_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bucket_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.buckets&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bucket_index_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.buckets.index&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bucket_marker_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;metadata_heap_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;realm_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;abc123&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;index_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.buckets.index&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Frist, we need to correct understand <code>domain_root</code>, it is the prefix of all the system object keys</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">void RGWZoneParams::decode_json(JSONObj *obj)<br>&#123;<br>  RGWSystemMetaObj::decode_json(obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;domain_root&quot;</span>, domain_root, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;control_pool&quot;</span>, control_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;gc_pool&quot;</span>, gc_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;lc_pool&quot;</span>, lc_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;log_pool&quot;</span>, log_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;intent_log_pool&quot;</span>, intent_log_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;roles_pool&quot;</span>, roles_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;reshard_pool&quot;</span>, reshard_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;usage_log_pool&quot;</span>, usage_log_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;user_keys_pool&quot;</span>, user_keys_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;user_email_pool&quot;</span>, user_email_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;user_swift_pool&quot;</span>, user_swift_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;user_uid_pool&quot;</span>, user_uid_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;otp_pool&quot;</span>, otp_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;notif_pool&quot;</span>, notif_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;topics_pool&quot;</span>, topics_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;account_pool&quot;</span>, account_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;group_pool&quot;</span>, group_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;system_key&quot;</span>, system_key, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;placement_pools&quot;</span>, placement_pools, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;tier_config&quot;</span>, tier_config, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;realm_id&quot;</span>, realm_id, obj);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">radosgw-admin zone create \<br>  --rgw-zone=dev \<br>  --user-uid-pool=<span class="hljs-string">&quot;.dev.meta&quot;</span> \<br>  --control-pool=<span class="hljs-string">&quot;.dev.control&quot;</span> \<br>  --log-pool=<span class="hljs-string">&quot;.dev.log&quot;</span> \<br>  --metadata-heap-pool=<span class="hljs-string">&quot;.dev.meta&quot;</span> \<br>  ...<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//rgw/rgw_zone.cc</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">init_zone_pool_names</span><span class="hljs-params">(<span class="hljs-type">const</span> DoutPrefixProvider *dpp, optional_yield y,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">const</span> std::set&lt;rgw_pool&gt;&amp; pools, RGWZoneParams&amp; info)</span></span><br><span class="hljs-function"></span>&#123;<br>  info.domain_root = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:root&quot;</span>, info.domain_root);<br>  info.control_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.control&quot;</span>, info.control_pool);<br>  info.gc_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:gc&quot;</span>, info.gc_pool);<br>  info.lc_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:lc&quot;</span>, info.lc_pool);<br>  info.log_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log&quot;</span>, info.log_pool);<br>  info.intent_log_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:intent&quot;</span>, info.intent_log_pool);<br>  info.usage_log_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:usage&quot;</span>, info.usage_log_pool);<br>  info.user_keys_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:users.keys&quot;</span>, info.user_keys_pool);<br>  info.user_email_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:users.email&quot;</span>, info.user_email_pool);<br>  info.user_swift_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:users.swift&quot;</span>, info.user_swift_pool);<br>  info.user_uid_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:users.uid&quot;</span>, info.user_uid_pool);<br>  info.roles_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:roles&quot;</span>, info.roles_pool);<br>  info.reshard_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:reshard&quot;</span>, info.reshard_pool);<br>  info.otp_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.otp&quot;</span>, info.otp_pool);<br>  info.oidc_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:oidc&quot;</span>, info.oidc_pool);<br>  info.notif_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:notif&quot;</span>, info.notif_pool);<br>  info.topics_pool =<br>      <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:topics&quot;</span>, info.topics_pool);<br>  info.account_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:accounts&quot;</span>, info.account_pool);<br>  info.group_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:groups&quot;</span>, info.group_pool);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [pname, placement] : info.placement_pools) &#123;<br>    placement.index_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.&quot;</span> + default_bucket_index_pool_suffix, placement.index_pool);<br>    placement.data_extra_pool= <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.&quot;</span> + default_storage_extra_pool_suffix, placement.data_extra_pool);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [sname, sc] : placement.storage_classes.<span class="hljs-built_in">get_all</span>()) &#123;<br>      <span class="hljs-keyword">if</span> (sc.data_pool) &#123;<br>        sc.data_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.&quot;</span> + default_storage_pool_suffix, *sc.data_pool);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The pools used by Zone is not statically defined,  you can custom them when you create the zone, or after the zone created.  They don’t have to be unique with each other either. You can configure all the meta data to use same pool. It is OK for dev env, but not recommanded for Production.</p><ul><li><p><code>.rgw.root</code></p><p>Region, zone, and global information records, one per object.</p><ul><li>Realm info</li><li>Zone Group info</li><li>Zone parameters</li><li>Period Config</li></ul></li><li><p><code>&lt;zone&gt;.rgw.control</code></p><p>notify.<N></p></li><li><p><code>&lt;zone&gt;.rgw.meta</code></p><p>This is a very important pool, which stores most kinds of meta data, each with aunique namespaces .</p><div class="table-container">  <table>    <tr>      <th>Name Space</th>             <th>Logical Pool</th>      <th>Meta Data</th>      <th>Key</th>      <th>Description</th>    <tr>      <td rowspan="2">root</td>      <td rowspan="2">domain-root</td>      <td>bucket entrypoint</td>      <td>{bucket_id}</td>      <td>Bucket static info</td>    </tr>    <tr>      <td>bucket instance</td>      <td>Bucket.meta.{bucket}.{marker}</td>            <td>Stores live state of the bucket (versioning, placement, shard info)</td>    </tr>    <tr>      <td>users.uid</td>      <td>user_uid_pool</td>      <td></td>      <td></td>      <td>Contains both per-user information (RGWUserInfo) in “{user}” objects and per-user lists of buckets in omaps of “{user}.buckets” objects.</td>    </tr>    <tr>      <td>users.keys</td>      <td>user_keys_pool</td>      <td></td>      <td></td>      <td>Loop up user by its access key</td>    </tr>    <tr>      <td>users.emails</td>      <td>user_email_pool</td>      <td></td>      <td></td>      <td>Loop up user by its email</td>    </tr>    <tr>      <td>accounts</td>      <td>account_pool</td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>roles</td>      <td>roles pool</td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>groups</td>      <td>groups pool</td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>topic</td>      <td>topic pool</td>      <td></td>      <td></td>      <td></td>    </tr>  </table></div></li></ul><p><img src="/rgw-metadata/rgw-meta-object-class.png" alt="classes in code"></p><h2 id="Bucket-Related-Meta-Data"><a href="#Bucket-Related-Meta-Data" class="headerlink" title="Bucket Related Meta Data"></a>Bucket Related Meta Data</h2><h3 id="Bucket-ID"><a href="#Bucket-ID" class="headerlink" title="Bucket ID"></a>Bucket ID</h3><p>Bucket ID &#x3D;  {zone_id}.{instance_id}.{bucket_numeric_id}</p><blockquote><p>Instance id is the rgw daemon’s id, it is usually genreated randomly or manually configured.</p></blockquote><p>Bucket Marker &#x3D; {bucket_id}  if the bucket is not shared.</p><p>Bucket Marker &#x3D; {shard_id}#{bucket_id} if the bucket is shared.</p><h3 id="Bucket-Endpoint"><a href="#Bucket-Endpoint" class="headerlink" title="Bucket Endpoint"></a>Bucket Endpoint</h3><h3 id="Bucket-Instance"><a href="#Bucket-Instance" class="headerlink" title="Bucket Instance"></a>Bucket Instance</h3><h3 id="Bucket-Index-Pool"><a href="#Bucket-Index-Pool" class="headerlink" title="Bucket Index Pool"></a>Bucket Index Pool</h3><p>The bucket index is a different kind of metadata, and is kept separately.  It is defined in zone’s placement pool setting, along with bucket data pool.<br>The bucket index holds a key-value map attached to RADOS objects. By default it is a single RADOS object per bucket, but it is possible since Hammer to shard that map over multiple RADOS objects. The map itself is kept in omap, associated with each RADOS object. The key of each omap is the name of the object, and the value holds some basic metadata of that object – metadata that shows up when listing the bucket. Also, each omap holds a header, and we keep some bucket accounting metadata in that header (number of objects, total size, etc.).</p><blockquote><p>Default Pool: <zone>.rgw.buckets.index<br>Objects are named .dir.<marker>: each contains a bucket index. If the index is sharded, each shard appends the shard index after the marker.</p></blockquote><p>Note that we also hold other information in the bucket index, which is kept in other key namespaces. We can hold the bucket index log there, and for versioned objects there is more information that we keep on other keys.</p><blockquote><p>OMAP  - A key-value map used in metadata objects</p><p>In rgw code, it looks like didn’t save the key, it just use a fixed schema to serialize the structure.</p></blockquote><h1 id="RGW-Meta-data"><a href="#RGW-Meta-data" class="headerlink" title="RGW Meta data"></a>RGW Meta data</h1><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>User Info</strong></td><td>.users.uid:&lt;user_id&gt;</td><td>Stores user account details (display name, email, keys, quotas)</td><td>.rgw.meta pool</td></tr><tr><td>User Email Lookup</td><td>.users.email:&lt;email&gt;</td><td>Lookup: email → user ID</td><td>.rgw.meta</td></tr><tr><td>User Access Key Lookup</td><td>.users.keys:&lt;access_key&gt;</td><td>Lookup: access_key → user ID</td><td>.rgw.meta</td></tr><tr><td>User Usage Stats</td><td>.user.usage:&lt;user_id&gt;</td><td>Aggregated usage statistics (bytes, ops)</td><td>.rgw.usage (optional)</td></tr><tr><td>User Swift Key</td><td>.user.swift:&lt;user_id&gt;</td><td>Swift-specific authentication keys</td><td>.rgw.meta</td></tr></tbody></table><h2 id="Bucket-meta-data"><a href="#Bucket-meta-data" class="headerlink" title="Bucket meta data"></a>Bucket meta data</h2><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>Bucket Metadata (static)</strong></td><td>.bucket.meta:&lt;bucket_name&gt;:&lt;bucket_id&gt;</td><td>Stores bucket identifier, owner, ACLs, etc.</td><td>.rgw.meta</td></tr><tr><td><strong>Bucket Instance</strong></td><td>.bucket.instance:&lt;bucket_name&gt;:&lt;bucket_instance_id&gt;</td><td>Stores live state of the bucket (versioning, placement, shard info)</td><td>.rgw.meta</td></tr><tr><td>Bucket Index</td><td>&lt;bucket_index_object&gt;</td><td>Stores object index per bucket (if enabled)</td><td>bucket’s index_pool</td></tr><tr><td>Bucket Directory Metadata</td><td>.dir.meta:&lt;bucket&gt;</td><td>Used for listing (legacy or FS-style)</td><td>.rgw.meta or bucket’s pool</td></tr></tbody></table><h3 id="Bucket-ID-1"><a href="#Bucket-ID-1" class="headerlink" title="Bucket ID"></a>Bucket ID</h3><p>Bucket ID &#x3D;  <zone_id>.<instance_id>.<bucket_numeric_id></p><blockquote><p>Instance id is the rgw daemon’s id, it is usually genreated randomly or manually configured.</p></blockquote><p>Bucket Marker &#x3D; Bucket ID  if the bucket is not shared.</p><p>Bucket Marker &#x3D; Shard_ID#bucket_id if the ucket is shared.</p><h3 id="Bucket-Index-Pool-1"><a href="#Bucket-Index-Pool-1" class="headerlink" title="Bucket Index Pool"></a>Bucket Index Pool</h3><p>The bucket index is a different kind of metadata, and is kept separately.  It is defined in zone’s placement pool setting, alog with bucket data pool.<br>The bucket index holds a key-value map attached to RADOS objects. By default it is a single RADOS object per bucket, but it is possible since Hammer to shard that map over multiple RADOS objects. The map itself is kept in omap, associated with each RADOS object. The key of each omap is the name of the object, and the value holds some basic metadata of that object – metadata that shows up when listing the bucket. Also, each omap holds a header, and we keep some bucket accounting metadata in that header (number of objects, total size, etc.).</p><blockquote><p>Default Pool: <zone>.rgw.buckets.index<br>Objects are named .dir.<marker>: each contains a bucket index. If the index is sharded, each shard appends the shard index after the marker.</p></blockquote><p>Note that we also hold other information in the bucket index, which is kept in other key namespaces. We can hold the bucket index log there, and for versioned objects there is more information that we keep on other keys.</p><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>Multi-site Metadata Log</strong></td><td>.meta.log:&lt;bucket&gt;:&lt;shard&gt;</td><td>Metadata log for bucket (object creation&#x2F;deletion)</td><td>.rgw.log</td></tr><tr><td>Data Sync Log</td><td>.data.log:&lt;bucket&gt;:&lt;shard&gt;</td><td>Data log for multi-site object sync</td><td>.rgw.log</td></tr><tr><td>Sync Status</td><td>.rgw.sync.status</td><td>Tracks sync status per zone</td><td>.rgw.meta</td></tr><tr><td>Sync Error</td><td>.rgw.sync.error:&lt;shard&gt;</td><td>Tracks sync errors</td><td>.rgw.meta</td></tr><tr><td>Sync Marker</td><td>.rgw.sync.marker:&lt;shard&gt;</td><td>Points to latest processed sync log</td><td>.rgw.meta</td></tr></tbody></table><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>Realm Config</strong></td><td>.realm:&lt;realm_id&gt;</td><td>Realm (multi-site root entity) metadata</td><td>.rgw.meta</td></tr><tr><td>Zonegroup Config</td><td>.zonegroup:&lt;zonegroup_id&gt;</td><td>Zonegroup metadata</td><td>.rgw.meta</td></tr><tr><td>Zone Config</td><td>.zone:&lt;zone_id&gt;</td><td>Zone metadata</td><td>.rgw.meta</td></tr><tr><td>Period Config</td><td>.period:&lt;epoch&gt;</td><td>Zonegroup layout&#x2F;version snapshot</td><td>.rgw.meta</td></tr><tr><td>Root Config Pointer</td><td>.rgw.root</td><td>Current active realm&#x2F;zonegroup&#x2F;zone</td><td>.rgw.meta</td></tr></tbody></table><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>Quota Info</strong></td><td>.user.quota:&lt;uid&gt;, .bucket.quota:&lt;bucket&gt;</td><td>Quota settings per user or bucket</td><td>.rgw.meta</td></tr><tr><td>Resharding Task Control</td><td>.rgw.control.reshard</td><td>Resharding work queue</td><td>.rgw.meta</td></tr><tr><td>Reshard Status</td><td>.rgw.reshard.status</td><td>Status of current&#x2F;last reshard ops</td><td>.rgw.meta</td></tr><tr><td>Orphaned Object Tracker</td><td>.rgw.orphan</td><td>Tracks objects missing metadata</td><td>.rgw.meta</td></tr></tbody></table><table><thead><tr><th><strong>Other Metadata</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td>Usage Aggregation</td><td>.usage</td><td>Global usage statistics</td><td>.rgw.usage</td></tr><tr><td>Temp URL Auth</td><td>.temp.url:&lt;token&gt;</td><td>Temporary URL tokens (if used)</td><td>.rgw.meta</td></tr><tr><td>Bucket Notification Config</td><td>(inline in .bucket.instance)</td><td>Stores topic&#x2F;subscription configs</td><td>.rgw.meta</td></tr><tr><td>Website Config</td><td>(inline in .bucket.instance)</td><td>Bucket website settings</td><td>.rgw.meta</td></tr><tr><td>CORS &#x2F; Lifecycle</td><td>(inline in .bucket.instance)</td><td>Bucket CORS rules &#x2F; lifecycle policy</td><td>.rgw.meta</td></tr></tbody></table><h2 id="Data-Pools-Data-Placement-Target"><a href="#Data-Pools-Data-Placement-Target" class="headerlink" title="Data Pools - Data Placement Target"></a>Data Pools - Data Placement Target</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rgw_data_placement_target</span> &#123;<br><br>  rgw_pool data_pool; <span class="hljs-comment">// Pool used to save Objects.</span><br><br>  rgw_pool data_extra_pool; <span class="hljs-comment">// Pool used to save extra control data of objects.</span><br><br>  rgw_pool index_pool; <span class="hljs-comment">//Bucket Index Pool</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>&lt;zone&gt;.rgw.buckets.index</code></p><p>Objects are named <code>.dir.&lt;marker&gt;</code>: each contains a bucket index. If the index is sharded, each shard appends the shard index after the marker.</p></li><li><p><code>&lt;zone&gt;.rgw.buckets.data</code></p><p>example: <code>default.7593.4__shadow_.488urDFerTYXavx4yAd-Op8mxehnvTI_1</code> <marker>_<key></p></li></ul><p>An example of a marker would be <code>default.16004.1</code> or <code>default.7593.4</code>. The current format is <code>&lt;zone&gt;.&lt;instance_id&gt;.&lt;bucket_id&gt;</code>. But once generated, a marker is not parsed again, so its format may change freely in the future.</p>]]></content>
    
    
    
    <tags>
      
      <tag>ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
