<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ceph RGW source code reading &lt;1&gt; - RGWSI Archtecture</title>
    <link href="/2025/09/13/rgw-code-reading1/"/>
    <url>/2025/09/13/rgw-code-reading1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>RGW treat all the subsystem as a service.  It carefully define each subsystem as a subclass of <strong>RGWServiceInstance</strong>. </p><p>RGWSI &#x3D;&#x3D; RGW Service Instance</p></blockquote><h1 id="What-are-services"><a href="#What-are-services" class="headerlink" title="What are services"></a>What are services</h1><p>​Following are the services RGW defined:</p><table><thead><tr><th>service class</th><th>description</th></tr></thead><tbody><tr><td>RGWSI_Finisher</td><td><strong>RGWSI_Finisher provides a structured way to register and execute callbacks that run after an operation is completed</strong>, such as PUT, DELETE, or creating a bucket. It’s like a “post-processing” manager.</td></tr><tr><td>RGWSI_Bucket</td><td></td></tr><tr><td>RGWSI_Bucket_SObj</td><td></td></tr><tr><td>RGWSI_Bucket_Sync</td><td></td></tr><tr><td>RGWSI_Bucket_Sync_SObj</td><td></td></tr><tr><td>RGWSI_BucketIndex</td><td></td></tr><tr><td>RGWSI_BucketIndex_RADOS</td><td></td></tr><tr><td>RGWSI_BILog_RADOS</td><td></td></tr><tr><td>RGWSI_Cls</td><td></td></tr><tr><td>RGWSI_ConfigKey</td><td></td></tr><tr><td>RGWSI_ConfigKey_RADOS</td><td></td></tr><tr><td>RGWSI_MDLog</td><td></td></tr><tr><td>RGWSI_Meta</td><td></td></tr><tr><td>RGWSI_MetaBackend</td><td></td></tr><tr><td>RGWSI_MetaBackend_SObj</td><td></td></tr><tr><td>RGWSI_MetaBackend_OTP</td><td></td></tr><tr><td>RGWSI_Notify</td><td></td></tr><tr><td>RGWSI_OTP</td><td></td></tr><tr><td>RGWSI_Zone</td><td></td></tr><tr><td>RGWSI_ZoneUtils</td><td></td></tr><tr><td>RGWSI_Quota</td><td></td></tr><tr><td>RGWSI_SyncModules</td><td></td></tr><tr><td>RGWSI_SysObj</td><td></td></tr><tr><td>RGWSI_SysObj_Core</td><td></td></tr><tr><td>RGWSI_SysObj_Cache</td><td></td></tr><tr><td>RGWSI_User</td><td></td></tr><tr><td>RGWSI_User_RADOS</td><td></td></tr><tr><td>RGWDataChangesLog</td><td></td></tr><tr><td>RGWSI_Role_RADOS</td><td></td></tr><tr><td>RGWAsyncRadosProcessor</td><td>RGWAsyncRadosProcessor is a utility class used in Ceph RGW to <strong>manage multiple concurrent asynchronous RADOS operations</strong>. It provides batching, error handling, and lifecycle management for those operations, helping the RGW process user requests efficiently without blocking on individual RADOS I&#x2F;O.</td></tr></tbody></table><blockquote><p> All the service are defined and inited in  rgw_service.h</p></blockquote><h1 id="How-services-running"><a href="#How-services-running" class="headerlink" title="How services running"></a>How services running</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RGWServices_Def::init</span><span class="hljs-params">(CephContext *cct,</span></span><br><span class="hljs-params"><span class="hljs-function">  rgw::sal::RadosStore* driver,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-type">bool</span> have_cache,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">bool</span> raw,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-type">bool</span> run_sync,</span></span><br><span class="hljs-params"><span class="hljs-function">  optional_yield y,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> DoutPrefixProvider *dpp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/*Create all the service instances */</span><br>  finisher = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_Finisher&gt;(cct);<br>  bucket_sobj = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_Bucket_SObj&gt;(cct);<br>  bucket_sync_sobj = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_Bucket_Sync_SObj&gt;(cct);<br>  bi_rados = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_BucketIndex_RADOS&gt;(cct);<br>  bilog_rados = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_BILog_RADOS&gt;(cct);<br>  cls = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_Cls&gt;(cct);<br>  config_key_rados = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_ConfigKey_RADOS&gt;(cct);<br>  datalog_rados = std::<span class="hljs-built_in">make_unique</span>&lt;RGWDataChangesLog&gt;(cct);<br>  mdlog = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_MDLog&gt;(cct, run_sync);<br>  meta = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_Meta&gt;(cct);<br>  meta_be_sobj = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_MetaBackend_SObj&gt;(cct);<br>  meta_be_otp = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_MetaBackend_OTP&gt;(cct);<br>  notify = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_Notify&gt;(cct);<br>  otp = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_OTP&gt;(cct);<br>  zone = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_Zone&gt;(cct);<br>  zone_utils = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_ZoneUtils&gt;(cct);<br>  quota = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_Quota&gt;(cct);<br>  sync_modules = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_SyncModules&gt;(cct);<br>  sysobj = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_SysObj&gt;(cct);<br>  sysobj_core = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_SysObj_Core&gt;(cct);<br>  user_rados = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_User_RADOS&gt;(cct);<br>  role_rados = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_Role_RADOS&gt;(cct);<br>  async_processor = std::<span class="hljs-built_in">make_unique</span>&lt;RGWAsyncRadosProcessor&gt;(<br>    cct, cct-&gt;_conf-&gt;rgw_num_async_rados_threads);<br><br>  <span class="hljs-keyword">if</span> (have_cache) &#123;<br>    sysobj_cache = std::<span class="hljs-built_in">make_unique</span>&lt;RGWSI_SysObj_Cache&gt;(dpp, cct);<br>  &#125;<br>  <span class="hljs-comment">/* Init the backend service*/</span><br>  vector&lt;RGWSI_MetaBackend *&gt; meta_bes&#123;meta_be_sobj.<span class="hljs-built_in">get</span>(), meta_be_otp.<span class="hljs-built_in">get</span>()&#125;;<br><br>  async_processor-&gt;<span class="hljs-built_in">start</span>();<br>  finisher-&gt;<span class="hljs-built_in">init</span>();<br>  bi_rados-&gt;<span class="hljs-built_in">init</span>(zone.<span class="hljs-built_in">get</span>(), driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(),<br> bilog_rados.<span class="hljs-built_in">get</span>(), datalog_rados.<span class="hljs-built_in">get</span>());<br>  bilog_rados-&gt;<span class="hljs-built_in">init</span>(bi_rados.<span class="hljs-built_in">get</span>());<br>  bucket_sobj-&gt;<span class="hljs-built_in">init</span>(zone.<span class="hljs-built_in">get</span>(), sysobj.<span class="hljs-built_in">get</span>(), sysobj_cache.<span class="hljs-built_in">get</span>(),<br>                    bi_rados.<span class="hljs-built_in">get</span>(), meta.<span class="hljs-built_in">get</span>(), meta_be_sobj.<span class="hljs-built_in">get</span>(),<br>                    sync_modules.<span class="hljs-built_in">get</span>(), bucket_sync_sobj.<span class="hljs-built_in">get</span>());<br>  bucket_sync_sobj-&gt;<span class="hljs-built_in">init</span>(zone.<span class="hljs-built_in">get</span>(),<br>                         sysobj.<span class="hljs-built_in">get</span>(),<br>                         sysobj_cache.<span class="hljs-built_in">get</span>(),<br>                         bucket_sobj.<span class="hljs-built_in">get</span>());<br>  cls-&gt;<span class="hljs-built_in">init</span>(zone.<span class="hljs-built_in">get</span>(), driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>());<br>  config_key_rados-&gt;<span class="hljs-built_in">init</span>(driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>());<br>  mdlog-&gt;<span class="hljs-built_in">init</span>(driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(), zone.<span class="hljs-built_in">get</span>(), sysobj.<span class="hljs-built_in">get</span>(),<br>      cls.<span class="hljs-built_in">get</span>(), async_processor.<span class="hljs-built_in">get</span>());<br>  meta-&gt;<span class="hljs-built_in">init</span>(sysobj.<span class="hljs-built_in">get</span>(), mdlog.<span class="hljs-built_in">get</span>(), meta_bes);<br>  meta_be_sobj-&gt;<span class="hljs-built_in">init</span>(sysobj.<span class="hljs-built_in">get</span>(), mdlog.<span class="hljs-built_in">get</span>());<br>  meta_be_otp-&gt;<span class="hljs-built_in">init</span>(sysobj.<span class="hljs-built_in">get</span>(), mdlog.<span class="hljs-built_in">get</span>(), cls.<span class="hljs-built_in">get</span>());<br>  notify-&gt;<span class="hljs-built_in">init</span>(zone.<span class="hljs-built_in">get</span>(), driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(),<br>       finisher.<span class="hljs-built_in">get</span>());<br>  otp-&gt;<span class="hljs-built_in">init</span>(zone.<span class="hljs-built_in">get</span>(), meta.<span class="hljs-built_in">get</span>(), meta_be_otp.<span class="hljs-built_in">get</span>());<br>  zone-&gt;<span class="hljs-built_in">init</span>(sysobj.<span class="hljs-built_in">get</span>(), driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(),<br>     sync_modules.<span class="hljs-built_in">get</span>(), bucket_sync_sobj.<span class="hljs-built_in">get</span>());<br>  zone_utils-&gt;<span class="hljs-built_in">init</span>(driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(), zone.<span class="hljs-built_in">get</span>());<br>  quota-&gt;<span class="hljs-built_in">init</span>(zone.<span class="hljs-built_in">get</span>());<br>  sync_modules-&gt;<span class="hljs-built_in">init</span>(zone.<span class="hljs-built_in">get</span>());<br>  sysobj_core-&gt;<span class="hljs-built_in">core_init</span>(driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(), zone.<span class="hljs-built_in">get</span>());<br>  <span class="hljs-keyword">if</span> (have_cache) &#123;<br>    sysobj_cache-&gt;<span class="hljs-built_in">init</span>(driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(), zone.<span class="hljs-built_in">get</span>(), notify.<span class="hljs-built_in">get</span>());<br>    sysobj-&gt;<span class="hljs-built_in">init</span>(driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(), sysobj_cache.<span class="hljs-built_in">get</span>());<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    sysobj-&gt;<span class="hljs-built_in">init</span>(driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(), sysobj_core.<span class="hljs-built_in">get</span>());<br>  &#125;<br>  user_rados-&gt;<span class="hljs-built_in">init</span>(driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>(), zone.<span class="hljs-built_in">get</span>(), sysobj.<span class="hljs-built_in">get</span>(), sysobj_cache.<span class="hljs-built_in">get</span>(),<br>                   meta.<span class="hljs-built_in">get</span>(), meta_be_sobj.<span class="hljs-built_in">get</span>(), sync_modules.<span class="hljs-built_in">get</span>());<br>  role_rados-&gt;<span class="hljs-built_in">init</span>(zone.<span class="hljs-built_in">get</span>(), meta.<span class="hljs-built_in">get</span>(), meta_be_sobj.<span class="hljs-built_in">get</span>(), sysobj.<span class="hljs-built_in">get</span>());<br>  can_shutdown = <span class="hljs-literal">true</span>;<br><br>  <span class="hljs-type">int</span> r = finisher-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>  <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start finisher service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (!raw) &#123;<br>    r = notify-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start notify service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (!raw) &#123;<br>    r = zone-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start zone service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    r = datalog_rados-&gt;<span class="hljs-built_in">start</span>(dpp, &amp;zone-&gt;<span class="hljs-built_in">get_zone</span>(),<br>     zone-&gt;<span class="hljs-built_in">get_zone_params</span>(),<br>     driver-&gt;<span class="hljs-built_in">getRados</span>()-&gt;<span class="hljs-built_in">get_rados_handle</span>());<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start datalog_rados service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    r = mdlog-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start mdlog service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    r = sync_modules-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start sync modules service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br>  &#125;<br><br>  r = cls-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>  <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start cls service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  r = config_key_rados-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>  <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start config_key service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  r = zone_utils-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>  <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start zone_utils service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  r = quota-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>  <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start quota service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  r = sysobj_core-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>  <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start sysobj_core service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (have_cache) &#123;<br>    r = sysobj_cache-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start sysobj_cache service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br>  &#125;<br><br>  r = sysobj-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>  <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start sysobj service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (!raw) &#123;<br>    r = meta_be_sobj-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start meta_be_sobj service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    r = meta-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start meta service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    r = bucket_sobj-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start bucket service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    r = bucket_sync_sobj-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start bucket_sync service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    r = user_rados-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start user_rados service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    r = otp-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldpp_dout</span>(dpp, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start otp service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    r = role_rados-&gt;<span class="hljs-built_in">start</span>(y, dpp);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">ldout</span>(cct, <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">&quot;ERROR: failed to start role_rados service (&quot;</span> &lt;&lt; <span class="hljs-built_in">cpp_strerror</span>(-r) &lt;&lt; dendl;<br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* cache or core services will be started by sysobj */</span><br><br>  <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="How-rgw-down-to-services-init"><a href="#How-rgw-down-to-services-init" class="headerlink" title="How rgw down to services init"></a>How rgw down to services init</h2><p>​<img src="/rgw-code-reading1/services-init-callstack.png" alt="service init callstack"></p><h1 id="MDlog-Service"><a href="#MDlog-Service" class="headerlink" title="MDlog Service"></a>MDlog Service</h1><blockquote><p>The MDlog service is used to read&#x2F;write MDLogs. There are two type of MDLogs</p><ul><li>Pre-modify MDLOG with flag of MDLOG_STATUS_WRITE&#x2F;REMOVE </li><li>Post-modify MDLOG with flag MDLOG_STATUS_COMPLETE</li></ul></blockquote><p><img src="/rgw-code-reading1/mdlog-service.png" alt="Metadata Backend Service"></p><h1 id="Metadata-Backend-Service"><a href="#Metadata-Backend-Service" class="headerlink" title="Metadata Backend Service"></a>Metadata Backend Service</h1><blockquote><p>The Metadata Backend service is used to execute the metadata operation, and also handle the meta data syncing among zones in same zone group. It provide 4 methods:</p></blockquote><p><img src="/rgw-code-reading1/metadata-backend-service.png" alt="Metadata Backend Service"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RGWSI_MetaBackend::do_mutate</span><span class="hljs-params">(RGWSI_MetaBackend::Context *ctx,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-type">const</span> string&amp; key,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-type">const</span> ceph::real_time&amp; mtime,</span></span><br><span class="hljs-params"><span class="hljs-function"> RGWObjVersionTracker *objv_tracker,</span></span><br><span class="hljs-params"><span class="hljs-function"> RGWMDLogStatus op_type,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 optional_yield y,</span></span><br><span class="hljs-params"><span class="hljs-function"> std::function&lt;<span class="hljs-type">int</span>()&gt; f,</span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-type">bool</span> generic_prepare,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-type">const</span> DoutPrefixProvider *dpp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> ret;<br><br>  <span class="hljs-keyword">if</span> (generic_prepare) &#123;<br>    ret = <span class="hljs-built_in">prepare_mutate</span>(ctx, key, mtime, objv_tracker, y, dpp);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span> ||<br>ret == STATUS_NO_APPLY) &#123;<br>      <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>  &#125;<br><br>  RGWMetadataLogData log_data;<br>   <span class="hljs-comment">/*Flag the mdlog as WRITE/REMOVE*/</span><br>  ret = <span class="hljs-built_in">pre_modify</span>(dpp, ctx, key, log_data, objv_tracker, op_type, y);<br>  <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> ret;<br>  &#125;<br><br>  <span class="hljs-comment">/* Execute the operation */</span><br>  ret = <span class="hljs-built_in">f</span>();<br><br>  <span class="hljs-comment">/* cascading ret into post_modify(). Flag the mdlog as COMPLETE */</span><br>  ret = <span class="hljs-built_in">post_modify</span>(dpp, ctx, key, log_data, objv_tracker, ret, y);<br>  <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> ret;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rgw metadata, pool and system objects</title>
    <link href="/2025/09/13/rgw-metadata/"/>
    <url>/2025/09/13/rgw-metadata/</url>
    
    <content type="html"><![CDATA[<p>Meta Data saved in pools</p><h1 id="Pools-used-by-Zone"><a href="#Pools-used-by-Zone" class="headerlink" title="Pools used by Zone"></a>Pools used by Zone</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;domain_root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;control_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.control&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;gc_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.gc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.log&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;intent_log_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.log&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;usage_log_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.usage&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;reshard_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.reshard&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;user_keys_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;user_email_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;user_swift_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;user_uid_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bucket_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.buckets&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bucket_index_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.buckets.index&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bucket_marker_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;metadata_heap_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.meta&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;realm_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;abc123&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;index_pool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.rgw.buckets.index&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Frist, we need to correct understand <code>domain_root</code>, it is the prefix of all the system object keys</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">void RGWZoneParams::decode_json(JSONObj *obj)<br>&#123;<br>  RGWSystemMetaObj::decode_json(obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;domain_root&quot;</span>, domain_root, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;control_pool&quot;</span>, control_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;gc_pool&quot;</span>, gc_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;lc_pool&quot;</span>, lc_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;log_pool&quot;</span>, log_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;intent_log_pool&quot;</span>, intent_log_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;roles_pool&quot;</span>, roles_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;reshard_pool&quot;</span>, reshard_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;usage_log_pool&quot;</span>, usage_log_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;user_keys_pool&quot;</span>, user_keys_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;user_email_pool&quot;</span>, user_email_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;user_swift_pool&quot;</span>, user_swift_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;user_uid_pool&quot;</span>, user_uid_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;otp_pool&quot;</span>, otp_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;notif_pool&quot;</span>, notif_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;topics_pool&quot;</span>, topics_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;account_pool&quot;</span>, account_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;group_pool&quot;</span>, group_pool, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;system_key&quot;</span>, system_key, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;placement_pools&quot;</span>, placement_pools, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;tier_config&quot;</span>, tier_config, obj);<br>  JSONDecoder::decode_json(<span class="hljs-string">&quot;realm_id&quot;</span>, realm_id, obj);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">radosgw-admin zone create \<br>  --rgw-zone=dev \<br>  --user-uid-pool=<span class="hljs-string">&quot;.dev.meta&quot;</span> \<br>  --control-pool=<span class="hljs-string">&quot;.dev.control&quot;</span> \<br>  --log-pool=<span class="hljs-string">&quot;.dev.log&quot;</span> \<br>  --metadata-heap-pool=<span class="hljs-string">&quot;.dev.meta&quot;</span> \<br>  ...<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//rgw/rgw_zone.cc</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">init_zone_pool_names</span><span class="hljs-params">(<span class="hljs-type">const</span> DoutPrefixProvider *dpp, optional_yield y,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">const</span> std::set&lt;rgw_pool&gt;&amp; pools, RGWZoneParams&amp; info)</span></span><br><span class="hljs-function"></span>&#123;<br>  info.domain_root = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:root&quot;</span>, info.domain_root);<br>  info.control_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.control&quot;</span>, info.control_pool);<br>  info.gc_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:gc&quot;</span>, info.gc_pool);<br>  info.lc_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:lc&quot;</span>, info.lc_pool);<br>  info.log_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log&quot;</span>, info.log_pool);<br>  info.intent_log_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:intent&quot;</span>, info.intent_log_pool);<br>  info.usage_log_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:usage&quot;</span>, info.usage_log_pool);<br>  info.user_keys_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:users.keys&quot;</span>, info.user_keys_pool);<br>  info.user_email_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:users.email&quot;</span>, info.user_email_pool);<br>  info.user_swift_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:users.swift&quot;</span>, info.user_swift_pool);<br>  info.user_uid_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:users.uid&quot;</span>, info.user_uid_pool);<br>  info.roles_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:roles&quot;</span>, info.roles_pool);<br>  info.reshard_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:reshard&quot;</span>, info.reshard_pool);<br>  info.otp_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.otp&quot;</span>, info.otp_pool);<br>  info.oidc_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:oidc&quot;</span>, info.oidc_pool);<br>  info.notif_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.log:notif&quot;</span>, info.notif_pool);<br>  info.topics_pool =<br>      <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:topics&quot;</span>, info.topics_pool);<br>  info.account_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:accounts&quot;</span>, info.account_pool);<br>  info.group_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.rgw.meta:groups&quot;</span>, info.group_pool);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [pname, placement] : info.placement_pools) &#123;<br>    placement.index_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.&quot;</span> + default_bucket_index_pool_suffix, placement.index_pool);<br>    placement.data_extra_pool= <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.&quot;</span> + default_storage_extra_pool_suffix, placement.data_extra_pool);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [sname, sc] : placement.storage_classes.<span class="hljs-built_in">get_all</span>()) &#123;<br>      <span class="hljs-keyword">if</span> (sc.data_pool) &#123;<br>        sc.data_pool = <span class="hljs-built_in">fix_zone_pool_dup</span>(pools, info.name, <span class="hljs-string">&quot;.&quot;</span> + default_storage_pool_suffix, *sc.data_pool);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The pools used by Zone is not statically defined,  you can custom them when you create the zone, or after the zone created.  They don’t have to be unique with each other either. You can configure all the meta data to use same pool. It is OK for dev env, but not recommanded for Production.</p><ul><li><p><code>.rgw.root</code></p><p>Region, zone, and global information records, one per object.</p><ul><li>Realm info</li><li>Zone Group info</li><li>Zone parameters</li><li>Period Config</li></ul></li><li><p><code>&lt;zone&gt;.rgw.control</code></p><p>notify.<N></p></li><li><p><code>&lt;zone&gt;.rgw.meta</code></p><p>This is a very important pool, which stores most kinds of meta data, each with aunique namespaces .</p><div class="table-container">  <table>    <tr>      <th>Name Space</th>             <th>Logical Pool</th>      <th>Meta Data</th>      <th>Key</th>      <th>Description</th>    <tr>      <td rowspan="2">root</td>      <td rowspan="2">domain-root</td>      <td>bucket entrypoint</td>      <td>{bucket_id}</td>      <td>Bucket static info</td>    </tr>    <tr>      <td>bucket instance</td>      <td>Bucket.meta.{bucket}.{marker}</td>            <td>Stores live state of the bucket (versioning, placement, shard info)</td>    </tr>    <tr>      <td>users.uid</td>      <td>user_uid_pool</td>      <td></td>      <td></td>      <td>Contains both per-user information (RGWUserInfo) in “{user}” objects and per-user lists of buckets in omaps of “{user}.buckets” objects.</td>    </tr>    <tr>      <td>users.keys</td>      <td>user_keys_pool</td>      <td></td>      <td></td>      <td>Loop up user by its access key</td>    </tr>    <tr>      <td>users.emails</td>      <td>user_email_pool</td>      <td></td>      <td></td>      <td>Loop up user by its email</td>    </tr>    <tr>      <td>accounts</td>      <td>account_pool</td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>roles</td>      <td>roles pool</td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>groups</td>      <td>groups pool</td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>topic</td>      <td>topic pool</td>      <td></td>      <td></td>      <td></td>    </tr>  </table></div></li></ul><p><img src="/rgw-metadata/rgw-meta-object-class.png" alt="classes in code"></p><h2 id="Bucket-Related-Meta-Data"><a href="#Bucket-Related-Meta-Data" class="headerlink" title="Bucket Related Meta Data"></a>Bucket Related Meta Data</h2><h3 id="Bucket-ID"><a href="#Bucket-ID" class="headerlink" title="Bucket ID"></a>Bucket ID</h3><p>Bucket ID &#x3D;  {zone_id}.{instance_id}.{bucket_numeric_id}</p><blockquote><p>Instance id is the rgw daemon’s id, it is usually genreated randomly or manually configured.</p></blockquote><p>Bucket Marker &#x3D; {bucket_id}  if the bucket is not shared.</p><p>Bucket Marker &#x3D; {shard_id}#{bucket_id} if the bucket is shared.</p><h3 id="Bucket-Endpoint"><a href="#Bucket-Endpoint" class="headerlink" title="Bucket Endpoint"></a>Bucket Endpoint</h3><h3 id="Bucket-Instance"><a href="#Bucket-Instance" class="headerlink" title="Bucket Instance"></a>Bucket Instance</h3><h3 id="Bucket-Index-Pool"><a href="#Bucket-Index-Pool" class="headerlink" title="Bucket Index Pool"></a>Bucket Index Pool</h3><p>The bucket index is a different kind of metadata, and is kept separately.  It is defined in zone’s placement pool setting, along with bucket data pool.<br>The bucket index holds a key-value map attached to RADOS objects. By default it is a single RADOS object per bucket, but it is possible since Hammer to shard that map over multiple RADOS objects. The map itself is kept in omap, associated with each RADOS object. The key of each omap is the name of the object, and the value holds some basic metadata of that object – metadata that shows up when listing the bucket. Also, each omap holds a header, and we keep some bucket accounting metadata in that header (number of objects, total size, etc.).</p><blockquote><p>Default Pool: <zone>.rgw.buckets.index<br>Objects are named .dir.<marker>: each contains a bucket index. If the index is sharded, each shard appends the shard index after the marker.</p></blockquote><p>Note that we also hold other information in the bucket index, which is kept in other key namespaces. We can hold the bucket index log there, and for versioned objects there is more information that we keep on other keys.</p><blockquote><p>OMAP  - A key-value map used in metadata objects</p><p>In rgw code, it looks like didn’t save the key, it just use a fixed schema to serialize the structure.</p></blockquote><h1 id="RGW-Meta-data"><a href="#RGW-Meta-data" class="headerlink" title="RGW Meta data"></a>RGW Meta data</h1><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>User Info</strong></td><td>.users.uid:&lt;user_id&gt;</td><td>Stores user account details (display name, email, keys, quotas)</td><td>.rgw.meta pool</td></tr><tr><td>User Email Lookup</td><td>.users.email:&lt;email&gt;</td><td>Lookup: email → user ID</td><td>.rgw.meta</td></tr><tr><td>User Access Key Lookup</td><td>.users.keys:&lt;access_key&gt;</td><td>Lookup: access_key → user ID</td><td>.rgw.meta</td></tr><tr><td>User Usage Stats</td><td>.user.usage:&lt;user_id&gt;</td><td>Aggregated usage statistics (bytes, ops)</td><td>.rgw.usage (optional)</td></tr><tr><td>User Swift Key</td><td>.user.swift:&lt;user_id&gt;</td><td>Swift-specific authentication keys</td><td>.rgw.meta</td></tr></tbody></table><h2 id="Bucket-meta-data"><a href="#Bucket-meta-data" class="headerlink" title="Bucket meta data"></a>Bucket meta data</h2><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>Bucket Metadata (static)</strong></td><td>.bucket.meta:&lt;bucket_name&gt;:&lt;bucket_id&gt;</td><td>Stores bucket identifier, owner, ACLs, etc.</td><td>.rgw.meta</td></tr><tr><td><strong>Bucket Instance</strong></td><td>.bucket.instance:&lt;bucket_name&gt;:&lt;bucket_instance_id&gt;</td><td>Stores live state of the bucket (versioning, placement, shard info)</td><td>.rgw.meta</td></tr><tr><td>Bucket Index</td><td>&lt;bucket_index_object&gt;</td><td>Stores object index per bucket (if enabled)</td><td>bucket’s index_pool</td></tr><tr><td>Bucket Directory Metadata</td><td>.dir.meta:&lt;bucket&gt;</td><td>Used for listing (legacy or FS-style)</td><td>.rgw.meta or bucket’s pool</td></tr></tbody></table><h3 id="Bucket-ID-1"><a href="#Bucket-ID-1" class="headerlink" title="Bucket ID"></a>Bucket ID</h3><p>Bucket ID &#x3D;  <zone_id>.<instance_id>.<bucket_numeric_id></p><blockquote><p>Instance id is the rgw daemon’s id, it is usually genreated randomly or manually configured.</p></blockquote><p>Bucket Marker &#x3D; Bucket ID  if the bucket is not shared.</p><p>Bucket Marker &#x3D; Shard_ID#bucket_id if the ucket is shared.</p><h3 id="Bucket-Index-Pool-1"><a href="#Bucket-Index-Pool-1" class="headerlink" title="Bucket Index Pool"></a>Bucket Index Pool</h3><p>The bucket index is a different kind of metadata, and is kept separately.  It is defined in zone’s placement pool setting, alog with bucket data pool.<br>The bucket index holds a key-value map attached to RADOS objects. By default it is a single RADOS object per bucket, but it is possible since Hammer to shard that map over multiple RADOS objects. The map itself is kept in omap, associated with each RADOS object. The key of each omap is the name of the object, and the value holds some basic metadata of that object – metadata that shows up when listing the bucket. Also, each omap holds a header, and we keep some bucket accounting metadata in that header (number of objects, total size, etc.).</p><blockquote><p>Default Pool: <zone>.rgw.buckets.index<br>Objects are named .dir.<marker>: each contains a bucket index. If the index is sharded, each shard appends the shard index after the marker.</p></blockquote><p>Note that we also hold other information in the bucket index, which is kept in other key namespaces. We can hold the bucket index log there, and for versioned objects there is more information that we keep on other keys.</p><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>Multi-site Metadata Log</strong></td><td>.meta.log:&lt;bucket&gt;:&lt;shard&gt;</td><td>Metadata log for bucket (object creation&#x2F;deletion)</td><td>.rgw.log</td></tr><tr><td>Data Sync Log</td><td>.data.log:&lt;bucket&gt;:&lt;shard&gt;</td><td>Data log for multi-site object sync</td><td>.rgw.log</td></tr><tr><td>Sync Status</td><td>.rgw.sync.status</td><td>Tracks sync status per zone</td><td>.rgw.meta</td></tr><tr><td>Sync Error</td><td>.rgw.sync.error:&lt;shard&gt;</td><td>Tracks sync errors</td><td>.rgw.meta</td></tr><tr><td>Sync Marker</td><td>.rgw.sync.marker:&lt;shard&gt;</td><td>Points to latest processed sync log</td><td>.rgw.meta</td></tr></tbody></table><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>Realm Config</strong></td><td>.realm:&lt;realm_id&gt;</td><td>Realm (multi-site root entity) metadata</td><td>.rgw.meta</td></tr><tr><td>Zonegroup Config</td><td>.zonegroup:&lt;zonegroup_id&gt;</td><td>Zonegroup metadata</td><td>.rgw.meta</td></tr><tr><td>Zone Config</td><td>.zone:&lt;zone_id&gt;</td><td>Zone metadata</td><td>.rgw.meta</td></tr><tr><td>Period Config</td><td>.period:&lt;epoch&gt;</td><td>Zonegroup layout&#x2F;version snapshot</td><td>.rgw.meta</td></tr><tr><td>Root Config Pointer</td><td>.rgw.root</td><td>Current active realm&#x2F;zonegroup&#x2F;zone</td><td>.rgw.meta</td></tr></tbody></table><table><thead><tr><th><strong>Metadata Type</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td><strong>Quota Info</strong></td><td>.user.quota:&lt;uid&gt;, .bucket.quota:&lt;bucket&gt;</td><td>Quota settings per user or bucket</td><td>.rgw.meta</td></tr><tr><td>Resharding Task Control</td><td>.rgw.control.reshard</td><td>Resharding work queue</td><td>.rgw.meta</td></tr><tr><td>Reshard Status</td><td>.rgw.reshard.status</td><td>Status of current&#x2F;last reshard ops</td><td>.rgw.meta</td></tr><tr><td>Orphaned Object Tracker</td><td>.rgw.orphan</td><td>Tracks objects missing metadata</td><td>.rgw.meta</td></tr></tbody></table><table><thead><tr><th><strong>Other Metadata</strong></th><th><strong>Object Key Format</strong></th><th><strong>Used For</strong></th><th><strong>Stored In</strong></th></tr></thead><tbody><tr><td>Usage Aggregation</td><td>.usage</td><td>Global usage statistics</td><td>.rgw.usage</td></tr><tr><td>Temp URL Auth</td><td>.temp.url:&lt;token&gt;</td><td>Temporary URL tokens (if used)</td><td>.rgw.meta</td></tr><tr><td>Bucket Notification Config</td><td>(inline in .bucket.instance)</td><td>Stores topic&#x2F;subscription configs</td><td>.rgw.meta</td></tr><tr><td>Website Config</td><td>(inline in .bucket.instance)</td><td>Bucket website settings</td><td>.rgw.meta</td></tr><tr><td>CORS &#x2F; Lifecycle</td><td>(inline in .bucket.instance)</td><td>Bucket CORS rules &#x2F; lifecycle policy</td><td>.rgw.meta</td></tr></tbody></table><h2 id="Data-Pools-Data-Placement-Target"><a href="#Data-Pools-Data-Placement-Target" class="headerlink" title="Data Pools - Data Placement Target"></a>Data Pools - Data Placement Target</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rgw_data_placement_target</span> &#123;<br><br>  rgw_pool data_pool; <span class="hljs-comment">// Pool used to save Objects.</span><br><br>  rgw_pool data_extra_pool; <span class="hljs-comment">// Pool used to save extra control data of objects.</span><br><br>  rgw_pool index_pool; <span class="hljs-comment">//Bucket Index Pool</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>&lt;zone&gt;.rgw.buckets.index</code></p><p>Objects are named <code>.dir.&lt;marker&gt;</code>: each contains a bucket index. If the index is sharded, each shard appends the shard index after the marker.</p></li><li><p><code>&lt;zone&gt;.rgw.buckets.data</code></p><p>example: <code>default.7593.4__shadow_.488urDFerTYXavx4yAd-Op8mxehnvTI_1</code> <marker>_<key></p></li></ul><p>An example of a marker would be <code>default.16004.1</code> or <code>default.7593.4</code>. The current format is <code>&lt;zone&gt;.&lt;instance_id&gt;.&lt;bucket_id&gt;</code>. But once generated, a marker is not parsed again, so its format may change freely in the future.</p>]]></content>
    
    
    
    <tags>
      
      <tag>ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
